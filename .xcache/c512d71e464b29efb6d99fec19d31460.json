{"dependencies":[{"name":"/Users/websi96/WU/nnfp/node_modules/gpu.js/package.json","includedInParent":true,"mtime":1528767275975},{"name":"/Users/websi96/WU/nnfp/package.json","includedInParent":true,"mtime":1529790947609},{"name":"/Users/websi96/WU/nnfp/node_modules/gpu.js/.babelrc","includedInParent":true,"mtime":1528157906000},{"name":"../../core/utils","loc":{"line":3,"column":20},"parent":"/Users/websi96/WU/nnfp/node_modules/gpu.js/dist/backend/web-gl/kernel-string.js","resolved":"/Users/websi96/WU/nnfp/node_modules/gpu.js/dist/core/utils.js"},{"name":"../kernel-run-shortcut","loc":{"line":4,"column":32},"parent":"/Users/websi96/WU/nnfp/node_modules/gpu.js/dist/backend/web-gl/kernel-string.js","resolved":"/Users/websi96/WU/nnfp/node_modules/gpu.js/dist/backend/kernel-run-shortcut.js"}],"generated":{"js":"'use strict';\n\nvar utils = require('../../core/utils');\nvar kernelRunShortcut = require('../kernel-run-shortcut');\n\nfunction removeFnNoise(fn) {\n  if (/^function /.test(fn)) {\n    fn = fn.substring(9);\n  }\n  return fn.replace(/[_]typeof/g, 'typeof');\n}\n\nfunction removeNoise(str) {\n  return str.replace(/[_]typeof/g, 'typeof');\n}\n\nmodule.exports = function (gpuKernel, name) {\n  return '() => {\\n    ' + kernelRunShortcut.toString() + ';\\n    const utils = {\\n      allPropertiesOf: ' + removeNoise(utils.allPropertiesOf.toString()) + ',\\n      clone: ' + removeNoise(utils.clone.toString()) + ',\\n      splitArray: ' + removeNoise(utils.splitArray.toString()) + ',\\n      getArgumentType: ' + removeNoise(utils.getArgumentType.toString()) + ',\\n      getDimensions: ' + removeNoise(utils.getDimensions.toString()) + ',\\n      dimToTexSize: ' + removeNoise(utils.dimToTexSize.toString()) + ',\\n      flattenTo: ' + removeNoise(utils.flattenTo.toString()) + ',\\n      flatten2dArrayTo: ' + removeNoise(utils.flatten2dArrayTo.toString()) + ',\\n      flatten3dArrayTo: ' + removeNoise(utils.flatten3dArrayTo.toString()) + ',\\n      systemEndianness: \\'' + removeNoise(utils.systemEndianness()) + '\\',\\n      initWebGl: ' + removeNoise(utils.initWebGl.toString()) + ',\\n      isArray: ' + removeNoise(utils.isArray.toString()) + '\\n    };\\n    const Utils = utils;\\n    const canvases = [];\\n    const maxTexSizes = {};\\n    class ' + (name || 'Kernel') + ' {\\n      constructor() {\\n        this.maxTexSize = null;\\n        this.argumentsLength = 0;\\n        this._canvas = null;\\n        this._webGl = null;\\n        this.built = false;\\n        this.program = null;\\n        this.paramNames = ' + JSON.stringify(gpuKernel.paramNames) + ';\\n        this.paramTypes = ' + JSON.stringify(gpuKernel.paramTypes) + ';\\n        this.texSize = ' + JSON.stringify(gpuKernel.texSize) + ';\\n        this.output = ' + JSON.stringify(gpuKernel.output) + ';\\n        this.compiledFragShaderString = `' + gpuKernel.compiledFragShaderString + '`;\\n\\t\\t    this.compiledVertShaderString = `' + gpuKernel.compiledVertShaderString + '`;\\n\\t\\t    this.programUniformLocationCache = {};\\n\\t\\t    this.textureCache = {};\\n\\t\\t    this.subKernelOutputTextures = null;\\n\\t\\t    this.subKernelOutputVariableNames = null;\\n\\t\\t    this.uniform1fCache = {};\\n\\t\\t    this.uniform1iCache = {};\\n\\t\\t    this.uniform2fCache = {};\\n\\t\\t    this.uniform2fvCache = {};\\n\\t\\t    this.uniform3fvCache = {};\\n      }\\n      ' + removeFnNoise(gpuKernel._getFragShaderString.toString()) + '\\n      ' + removeFnNoise(gpuKernel._getVertShaderString.toString()) + '\\n      validateOptions() {}\\n      setupParams() {}\\n      setCanvas(canvas) { this._canvas = canvas; return this; }\\n      setWebGl(webGl) { this._webGl = webGl; return this; }\\n      ' + removeFnNoise(gpuKernel.getUniformLocation.toString()) + '\\n      ' + removeFnNoise(gpuKernel.setupParams.toString()) + '\\n      ' + removeFnNoise(gpuKernel.build.toString()) + '\\n\\t\\t  ' + removeFnNoise(gpuKernel.run.toString()) + '\\n\\t\\t  ' + removeFnNoise(gpuKernel._addArgument.toString()) + '\\n\\t\\t  ' + removeFnNoise(gpuKernel.getArgumentTexture.toString()) + '\\n\\t\\t  ' + removeFnNoise(gpuKernel.getTextureCache.toString()) + '\\n\\t\\t  ' + removeFnNoise(gpuKernel.getOutputTexture.toString()) + '\\n\\t\\t  ' + removeFnNoise(gpuKernel.renderOutput.toString()) + '\\n\\t\\t  ' + removeFnNoise(gpuKernel.updateMaxTexSize.toString()) + '\\n\\t\\t  ' + removeFnNoise(gpuKernel._setupOutputTexture.toString()) + '\\n\\t\\t  ' + removeFnNoise(gpuKernel.detachTextureCache.toString()) + '\\n\\t\\t  ' + removeFnNoise(gpuKernel.setUniform1f.toString()) + '\\n\\t\\t  ' + removeFnNoise(gpuKernel.setUniform1i.toString()) + '\\n\\t\\t  ' + removeFnNoise(gpuKernel.setUniform2f.toString()) + '\\n\\t\\t  ' + removeFnNoise(gpuKernel.setUniform2fv.toString()) + '\\n\\t\\t  ' + removeFnNoise(gpuKernel.setUniform3fv.toString()) + ' \\n    };\\n    return kernelRunShortcut(new Kernel());\\n  };';\n};","map":{"mappings":[{"source":"node_modules/gpu.js/dist/backend/web-gl/kernel-string.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/gpu.js/dist/backend/web-gl/kernel-string.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/gpu.js/dist/backend/web-gl/kernel-string.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/gpu.js/dist/backend/web-gl/kernel-string.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/gpu.js/dist/backend/web-gl/kernel-string.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/gpu.js/dist/backend/web-gl/kernel-string.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/gpu.js/dist/backend/web-gl/kernel-string.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/gpu.js/dist/backend/web-gl/kernel-string.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/gpu.js/dist/backend/web-gl/kernel-string.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/gpu.js/dist/backend/web-gl/kernel-string.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/gpu.js/dist/backend/web-gl/kernel-string.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/gpu.js/dist/backend/web-gl/kernel-string.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/gpu.js/dist/backend/web-gl/kernel-string.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/gpu.js/dist/backend/web-gl/kernel-string.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/gpu.js/dist/backend/web-gl/kernel-string.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/gpu.js/dist/backend/web-gl/kernel-string.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/gpu.js/dist/backend/web-gl/kernel-string.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/gpu.js/dist/backend/web-gl/kernel-string.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/gpu.js/dist/backend/web-gl/kernel-string.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}}],"sources":{"node_modules/gpu.js/dist/backend/web-gl/kernel-string.js":"'use strict';\n\nvar utils = require('../../core/utils');\nvar kernelRunShortcut = require('../kernel-run-shortcut');\n\nfunction removeFnNoise(fn) {\n  if (/^function /.test(fn)) {\n    fn = fn.substring(9);\n  }\n  return fn.replace(/[_]typeof/g, 'typeof');\n}\n\nfunction removeNoise(str) {\n  return str.replace(/[_]typeof/g, 'typeof');\n}\n\nmodule.exports = function (gpuKernel, name) {\n  return '() => {\\n    ' + kernelRunShortcut.toString() + ';\\n    const utils = {\\n      allPropertiesOf: ' + removeNoise(utils.allPropertiesOf.toString()) + ',\\n      clone: ' + removeNoise(utils.clone.toString()) + ',\\n      splitArray: ' + removeNoise(utils.splitArray.toString()) + ',\\n      getArgumentType: ' + removeNoise(utils.getArgumentType.toString()) + ',\\n      getDimensions: ' + removeNoise(utils.getDimensions.toString()) + ',\\n      dimToTexSize: ' + removeNoise(utils.dimToTexSize.toString()) + ',\\n      flattenTo: ' + removeNoise(utils.flattenTo.toString()) + ',\\n      flatten2dArrayTo: ' + removeNoise(utils.flatten2dArrayTo.toString()) + ',\\n      flatten3dArrayTo: ' + removeNoise(utils.flatten3dArrayTo.toString()) + ',\\n      systemEndianness: \\'' + removeNoise(utils.systemEndianness()) + '\\',\\n      initWebGl: ' + removeNoise(utils.initWebGl.toString()) + ',\\n      isArray: ' + removeNoise(utils.isArray.toString()) + '\\n    };\\n    const Utils = utils;\\n    const canvases = [];\\n    const maxTexSizes = {};\\n    class ' + (name || 'Kernel') + ' {\\n      constructor() {\\n        this.maxTexSize = null;\\n        this.argumentsLength = 0;\\n        this._canvas = null;\\n        this._webGl = null;\\n        this.built = false;\\n        this.program = null;\\n        this.paramNames = ' + JSON.stringify(gpuKernel.paramNames) + ';\\n        this.paramTypes = ' + JSON.stringify(gpuKernel.paramTypes) + ';\\n        this.texSize = ' + JSON.stringify(gpuKernel.texSize) + ';\\n        this.output = ' + JSON.stringify(gpuKernel.output) + ';\\n        this.compiledFragShaderString = `' + gpuKernel.compiledFragShaderString + '`;\\n\\t\\t    this.compiledVertShaderString = `' + gpuKernel.compiledVertShaderString + '`;\\n\\t\\t    this.programUniformLocationCache = {};\\n\\t\\t    this.textureCache = {};\\n\\t\\t    this.subKernelOutputTextures = null;\\n\\t\\t    this.subKernelOutputVariableNames = null;\\n\\t\\t    this.uniform1fCache = {};\\n\\t\\t    this.uniform1iCache = {};\\n\\t\\t    this.uniform2fCache = {};\\n\\t\\t    this.uniform2fvCache = {};\\n\\t\\t    this.uniform3fvCache = {};\\n      }\\n      ' + removeFnNoise(gpuKernel._getFragShaderString.toString()) + '\\n      ' + removeFnNoise(gpuKernel._getVertShaderString.toString()) + '\\n      validateOptions() {}\\n      setupParams() {}\\n      setCanvas(canvas) { this._canvas = canvas; return this; }\\n      setWebGl(webGl) { this._webGl = webGl; return this; }\\n      ' + removeFnNoise(gpuKernel.getUniformLocation.toString()) + '\\n      ' + removeFnNoise(gpuKernel.setupParams.toString()) + '\\n      ' + removeFnNoise(gpuKernel.build.toString()) + '\\n\\t\\t  ' + removeFnNoise(gpuKernel.run.toString()) + '\\n\\t\\t  ' + removeFnNoise(gpuKernel._addArgument.toString()) + '\\n\\t\\t  ' + removeFnNoise(gpuKernel.getArgumentTexture.toString()) + '\\n\\t\\t  ' + removeFnNoise(gpuKernel.getTextureCache.toString()) + '\\n\\t\\t  ' + removeFnNoise(gpuKernel.getOutputTexture.toString()) + '\\n\\t\\t  ' + removeFnNoise(gpuKernel.renderOutput.toString()) + '\\n\\t\\t  ' + removeFnNoise(gpuKernel.updateMaxTexSize.toString()) + '\\n\\t\\t  ' + removeFnNoise(gpuKernel._setupOutputTexture.toString()) + '\\n\\t\\t  ' + removeFnNoise(gpuKernel.detachTextureCache.toString()) + '\\n\\t\\t  ' + removeFnNoise(gpuKernel.setUniform1f.toString()) + '\\n\\t\\t  ' + removeFnNoise(gpuKernel.setUniform1i.toString()) + '\\n\\t\\t  ' + removeFnNoise(gpuKernel.setUniform2f.toString()) + '\\n\\t\\t  ' + removeFnNoise(gpuKernel.setUniform2fv.toString()) + '\\n\\t\\t  ' + removeFnNoise(gpuKernel.setUniform3fv.toString()) + ' \\n    };\\n    return kernelRunShortcut(new Kernel());\\n  };';\n};"},"lineCount":19}},"hash":"9c53a082d7f991dba1f456b6146c1da0","cacheData":{"env":{}},"id":359}