{"dependencies":[{"name":"/Users/websi96/WU/nnfp/package.json","includedInParent":true,"mtime":1529790009363},{"name":"fs","loc":{"line":1,"column":19},"parent":"/Users/websi96/WU/nnfp/src/callLines.js","resolved":"/usr/local/lib/node_modules/parcel-bundler/src/builtins/_empty.js"},{"name":"readline","loc":{"line":2,"column":25},"parent":"/Users/websi96/WU/nnfp/src/callLines.js","resolved":"/usr/local/lib/node_modules/parcel-bundler/src/builtins/_empty.js"},{"name":"stream","loc":{"line":3,"column":23},"parent":"/Users/websi96/WU/nnfp/src/callLines.js","resolved":"/usr/local/lib/node_modules/parcel-bundler/node_modules/stream-browserify/index.js"}],"generated":{"js":"var e=require(\"fs\"),r=require(\"readline\"),n=require(\"stream\");module.exports=function(a,t){var i=[],o=e.createReadStream(a),u=new n,c=r.createInterface(o,u);c.on(\"line\",function(e){i.push(e),0}),c.on(\"close\",function(){t(i)})};","map":{"mappings":[{"source":"src/callLines.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"src/callLines.js","name":"fs","original":{"line":1,"column":6},"generated":{"line":1,"column":4}},{"source":"src/callLines.js","name":"require","original":{"line":1,"column":11},"generated":{"line":1,"column":6}},{"source":"src/callLines.js","original":{"line":1,"column":19},"generated":{"line":1,"column":14}},{"source":"src/callLines.js","name":"readline","original":{"line":2,"column":6},"generated":{"line":1,"column":20}},{"source":"src/callLines.js","name":"require","original":{"line":2,"column":17},"generated":{"line":1,"column":22}},{"source":"src/callLines.js","original":{"line":2,"column":25},"generated":{"line":1,"column":30}},{"source":"src/callLines.js","name":"stream","original":{"line":3,"column":6},"generated":{"line":1,"column":42}},{"source":"src/callLines.js","name":"require","original":{"line":3,"column":15},"generated":{"line":1,"column":44}},{"source":"src/callLines.js","original":{"line":3,"column":23},"generated":{"line":1,"column":52}},{"source":"src/callLines.js","name":"module","original":{"line":11,"column":0},"generated":{"line":1,"column":62}},{"source":"src/callLines.js","name":"exports","original":{"line":11,"column":7},"generated":{"line":1,"column":69}},{"source":"src/callLines.js","original":{"line":11,"column":17},"generated":{"line":1,"column":77}},{"source":"src/callLines.js","name":"path","original":{"line":11,"column":36},"generated":{"line":1,"column":86}},{"source":"src/callLines.js","name":"callback","original":{"line":11,"column":42},"generated":{"line":1,"column":88}},{"source":"src/callLines.js","name":"arr","original":{"line":12,"column":8},"generated":{"line":1,"column":91}},{"source":"src/callLines.js","name":"arr","original":{"line":12,"column":8},"generated":{"line":1,"column":95}},{"source":"src/callLines.js","name":"instream","original":{"line":15,"column":8},"generated":{"line":1,"column":100}},{"source":"src/callLines.js","name":"fs","original":{"line":15,"column":19},"generated":{"line":1,"column":102}},{"source":"src/callLines.js","name":"createReadStream","original":{"line":15,"column":22},"generated":{"line":1,"column":104}},{"source":"src/callLines.js","name":"path","original":{"line":15,"column":39},"generated":{"line":1,"column":121}},{"source":"src/callLines.js","name":"outstream","original":{"line":16,"column":8},"generated":{"line":1,"column":124}},{"source":"src/callLines.js","original":{"line":16,"column":20},"generated":{"line":1,"column":126}},{"source":"src/callLines.js","name":"stream","original":{"line":16,"column":24},"generated":{"line":1,"column":130}},{"source":"src/callLines.js","name":"rl","original":{"line":17,"column":8},"generated":{"line":1,"column":132}},{"source":"src/callLines.js","name":"readline","original":{"line":17,"column":13},"generated":{"line":1,"column":134}},{"source":"src/callLines.js","name":"createInterface","original":{"line":17,"column":22},"generated":{"line":1,"column":136}},{"source":"src/callLines.js","name":"instream","original":{"line":17,"column":38},"generated":{"line":1,"column":152}},{"source":"src/callLines.js","name":"outstream","original":{"line":17,"column":48},"generated":{"line":1,"column":154}},{"source":"src/callLines.js","name":"on","original":{"line":19,"column":7},"generated":{"line":1,"column":157}},{"source":"src/callLines.js","name":"on","original":{"line":19,"column":7},"generated":{"line":1,"column":159}},{"source":"src/callLines.js","original":{"line":19,"column":10},"generated":{"line":1,"column":162}},{"source":"src/callLines.js","original":{"line":19,"column":18},"generated":{"line":1,"column":169}},{"source":"src/callLines.js","name":"line","original":{"line":19,"column":27},"generated":{"line":1,"column":178}},{"source":"src/callLines.js","name":"push","original":{"line":21,"column":16},"generated":{"line":1,"column":181}},{"source":"src/callLines.js","name":"push","original":{"line":21,"column":16},"generated":{"line":1,"column":183}},{"source":"src/callLines.js","name":"line","original":{"line":21,"column":21},"generated":{"line":1,"column":188}},{"source":"src/callLines.js","name":"count","original":{"line":23,"column":8},"generated":{"line":1,"column":191}},{"source":"src/callLines.js","name":"on","original":{"line":26,"column":7},"generated":{"line":1,"column":195}},{"source":"src/callLines.js","name":"on","original":{"line":26,"column":7},"generated":{"line":1,"column":197}},{"source":"src/callLines.js","original":{"line":26,"column":10},"generated":{"line":1,"column":200}},{"source":"src/callLines.js","original":{"line":26,"column":19},"generated":{"line":1,"column":208}},{"source":"src/callLines.js","name":"arr","original":{"line":27,"column":17},"generated":{"line":1,"column":219}},{"source":"src/callLines.js","name":"arr","original":{"line":27,"column":17},"generated":{"line":1,"column":221}}],"sources":{"src/callLines.js":"const fs = require('fs');\nconst readline = require('readline');\nconst stream = require('stream');\n\n/**\n * Reads a file line by line and calls back an array of lines.\n * \n * @param {string} path path on server to call lines from\n * @returns {Array} callback of an array of lines from the file\n */\nmodule.exports = function callLines(path, callback) {\n    var arr = [];\n    var count = 0;\n\n    var instream = fs.createReadStream(path);\n    var outstream = new stream();\n    var rl = readline.createInterface(instream, outstream);\n\n    rl.on('line', function(line) {\n        if (count == 0) {\n            arr.push(line);\n        } else arr.push(line);\n        count++;\n    });\n\n    rl.on('close', function() {\n        callback(arr);\n    });\n    \n}"},"lineCount":null}},"hash":"761cf2964f7b515a5228acccb221518f","cacheData":{"env":{}},"id":57}