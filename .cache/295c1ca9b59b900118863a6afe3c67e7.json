{"dependencies":[{"name":"/Users/websi96/WU/nnfp/node_modules/brain.js/package.json","includedInParent":true,"mtime":1528768154807},{"name":"/Users/websi96/WU/nnfp/package.json","includedInParent":true,"mtime":1529790947609}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n *\n * @param {String[]|Number[]} values\n * @param maxThreshold\n * @constructor\n */\nvar DataFormatter = function () {\n  function DataFormatter(values) {\n    var maxThreshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    _classCallCheck(this, DataFormatter);\n\n    if (values === undefined) return;\n\n    this.values = values;\n    // go over all characters and keep track of all unique ones seen\n    // count up all characters\n    this.indexTable = {};\n    this.characterTable = {};\n    this.characters = [];\n    this.buildCharactersFromIterable(values);\n    this.buildTables(maxThreshold);\n  }\n\n  _createClass(DataFormatter, [{\n    key: 'buildCharactersFromIterable',\n    value: function buildCharactersFromIterable(values) {\n      var tempCharactersTable = {};\n      for (var dataFormatterIndex = 0, dataFormatterLength = values.length; dataFormatterIndex < dataFormatterLength; dataFormatterIndex++) {\n        var characters = values[dataFormatterIndex];\n\n        if (characters.hasOwnProperty('length')) {\n          for (var characterIndex = 0, charactersLength = characters.length; characterIndex < charactersLength; characterIndex++) {\n            var character = characters[characterIndex];\n            if (tempCharactersTable.hasOwnProperty(character)) continue;\n            tempCharactersTable[character] = true;\n            this.characters.push(character);\n          }\n        } else {\n          var _character = values[dataFormatterIndex];\n          if (tempCharactersTable.hasOwnProperty(_character)) continue;\n          tempCharactersTable[dataFormatterIndex] = true;\n          this.characters.push(_character);\n        }\n      }\n    }\n  }, {\n    key: 'buildTables',\n    value: function buildTables(maxThreshold) {\n      // filter by count threshold and create pointers\n      var charactersLength = this.characters.length;\n      for (var characterIndex = 0; characterIndex < charactersLength; characterIndex++) {\n        var character = this.characters[characterIndex];\n        if (characterIndex >= maxThreshold) {\n          // add character to dataFormatter\n          this.indexTable[character] = characterIndex;\n          this.characterTable[characterIndex] = character;\n        }\n      }\n    }\n  }, {\n    key: 'toIndexes',\n    value: function toIndexes(value) {\n      var maxThreshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      var result = [];\n      var indexTable = this.indexTable;\n\n      for (var i = 0, max = value.length; i < max; i++) {\n        var character = value[i];\n        var index = indexTable[character];\n        if (index === undefined) {\n          throw new Error('unrecognized character \"' + character + '\"');\n        }\n        if (index < maxThreshold) continue;\n        result.push(index);\n      }\n\n      return result;\n    }\n  }, {\n    key: 'toIndexesInputOutput',\n    value: function toIndexesInputOutput(value1) {\n      var value2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var maxThreshold = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n      var result = void 0;\n      if (typeof value1 === 'string') {\n        result = this.toIndexes(value1.split('').concat(['stop-input', 'start-output']), maxThreshold);\n      } else {\n        result = this.toIndexes(value1.concat(['stop-input', 'start-output']), maxThreshold);\n      }\n\n      if (value2 === null) return result;\n\n      if (typeof value2 === 'string') {\n        return result.concat(this.toIndexes(value2.split(''), maxThreshold));\n      } else {\n        return result.concat(this.toIndexes(value2, maxThreshold));\n      }\n    }\n  }, {\n    key: 'toCharacters',\n    value: function toCharacters(indices) {\n      var maxThreshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      var result = [];\n      var characterTable = this.characterTable;\n\n      for (var i = 0, max = indices.length; i < max; i++) {\n        var index = indices[i];\n        if (index < maxThreshold) continue;\n        var character = characterTable[index];\n        if (character === undefined) {\n          throw new Error('unrecognized index \"' + index + '\"');\n        }\n        result.push(character);\n      }\n\n      return result;\n    }\n  }, {\n    key: 'toString',\n    value: function toString(indices, maxThreshold) {\n      return this.toCharacters(indices, maxThreshold).join('');\n    }\n  }, {\n    key: 'addInputOutput',\n    value: function addInputOutput() {\n      this.addSpecial('stop-input');\n      this.addSpecial('start-output');\n    }\n  }, {\n    key: 'addSpecial',\n    value: function addSpecial() {\n      for (var i = 0; i < arguments.length; i++) {\n        var special = arguments[i];\n        var specialIndex = this.indexTable[special] = this.characters.length;\n        this.characterTable[specialIndex] = special;\n        this.characters.push(special);\n      }\n    }\n  }, {\n    key: 'toFunctionString',\n    value: function toFunctionString() {\n      return '\\nvar characterTable = ' + JSON.stringify(this.characterTable) + ';\\nvar indexTable = ' + JSON.stringify(this.indexTable) + ';\\nvar characters = ' + JSON.stringify(this.characters) + ';\\n' + this.toIndexes.toString().replace(/(let|var) indexTable = this[.]indexTable;\\n/, '').replace(/this[.]/g, '') + '\\n' + this.toIndexesInputOutput.toString().replace(/this[.]/g, '') + '\\n' + this.toCharacters.toString().replace(/(let|var) characterTable = this[.]characterTable;\\n/g, '').replace(/this[.]/, '') + '\\n';\n    }\n  }], [{\n    key: 'fromAllPrintable',\n    value: function fromAllPrintable(maxThreshold) {\n      var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ['\\n'];\n\n      for (var i = 32; i <= 126; i++) {\n        values.push(String.fromCharCode(i));\n      }\n      return new DataFormatter(values, maxThreshold);\n    }\n  }, {\n    key: 'fromAllPrintableInputOutput',\n    value: function fromAllPrintableInputOutput(maxThreshold) {\n      var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ['\\n'];\n\n      var dataFormatter = DataFormatter.fromAllPrintable(maxThreshold, values);\n      dataFormatter.addInputOutput();\n      return dataFormatter;\n    }\n  }, {\n    key: 'fromStringInputOutput',\n    value: function fromStringInputOutput(string, maxThreshold) {\n      var _String$prototype;\n\n      var values = (_String$prototype = String.prototype).concat.apply(_String$prototype, _toConsumableArray(new Set(string)));\n      var dataFormatter = new DataFormatter(values, maxThreshold);\n      dataFormatter.addInputOutput();\n      return dataFormatter;\n    }\n  }, {\n    key: 'fromArrayInputOutput',\n    value: function fromArrayInputOutput(array, maxThreshold) {\n      var dataFormatter = new DataFormatter(array.filter(function (v, i, a) {\n        return a.indexOf(v) === i;\n      }).sort(), maxThreshold);\n      dataFormatter.addInputOutput();\n      return dataFormatter;\n    }\n  }, {\n    key: 'fromString',\n    value: function fromString(string, maxThreshold) {\n      var _String$prototype2;\n\n      var values = (_String$prototype2 = String.prototype).concat.apply(_String$prototype2, _toConsumableArray(new Set(string)));\n      return new DataFormatter(values, maxThreshold);\n    }\n  }, {\n    key: 'fromJSON',\n    value: function fromJSON(json) {\n      var dataFormatter = new DataFormatter();\n      dataFormatter.indexTable = json.indexTable;\n      dataFormatter.characterTable = json.characterTable;\n      dataFormatter.values = json.values;\n      dataFormatter.characters = json.characters;\n      return dataFormatter;\n    }\n  }]);\n\n  return DataFormatter;\n}();\n\nexports.default = DataFormatter;\n//# sourceMappingURL=data-formatter.js.map","map":{"mappings":[{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/brain.js/dist/utilities/data-formatter.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}}],"sources":{"node_modules/brain.js/dist/utilities/data-formatter.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n *\n * @param {String[]|Number[]} values\n * @param maxThreshold\n * @constructor\n */\nvar DataFormatter = function () {\n  function DataFormatter(values) {\n    var maxThreshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    _classCallCheck(this, DataFormatter);\n\n    if (values === undefined) return;\n\n    this.values = values;\n    // go over all characters and keep track of all unique ones seen\n    // count up all characters\n    this.indexTable = {};\n    this.characterTable = {};\n    this.characters = [];\n    this.buildCharactersFromIterable(values);\n    this.buildTables(maxThreshold);\n  }\n\n  _createClass(DataFormatter, [{\n    key: 'buildCharactersFromIterable',\n    value: function buildCharactersFromIterable(values) {\n      var tempCharactersTable = {};\n      for (var dataFormatterIndex = 0, dataFormatterLength = values.length; dataFormatterIndex < dataFormatterLength; dataFormatterIndex++) {\n        var characters = values[dataFormatterIndex];\n\n        if (characters.hasOwnProperty('length')) {\n          for (var characterIndex = 0, charactersLength = characters.length; characterIndex < charactersLength; characterIndex++) {\n            var character = characters[characterIndex];\n            if (tempCharactersTable.hasOwnProperty(character)) continue;\n            tempCharactersTable[character] = true;\n            this.characters.push(character);\n          }\n        } else {\n          var _character = values[dataFormatterIndex];\n          if (tempCharactersTable.hasOwnProperty(_character)) continue;\n          tempCharactersTable[dataFormatterIndex] = true;\n          this.characters.push(_character);\n        }\n      }\n    }\n  }, {\n    key: 'buildTables',\n    value: function buildTables(maxThreshold) {\n      // filter by count threshold and create pointers\n      var charactersLength = this.characters.length;\n      for (var characterIndex = 0; characterIndex < charactersLength; characterIndex++) {\n        var character = this.characters[characterIndex];\n        if (characterIndex >= maxThreshold) {\n          // add character to dataFormatter\n          this.indexTable[character] = characterIndex;\n          this.characterTable[characterIndex] = character;\n        }\n      }\n    }\n  }, {\n    key: 'toIndexes',\n    value: function toIndexes(value) {\n      var maxThreshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      var result = [];\n      var indexTable = this.indexTable;\n\n      for (var i = 0, max = value.length; i < max; i++) {\n        var character = value[i];\n        var index = indexTable[character];\n        if (index === undefined) {\n          throw new Error('unrecognized character \"' + character + '\"');\n        }\n        if (index < maxThreshold) continue;\n        result.push(index);\n      }\n\n      return result;\n    }\n  }, {\n    key: 'toIndexesInputOutput',\n    value: function toIndexesInputOutput(value1) {\n      var value2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var maxThreshold = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n      var result = void 0;\n      if (typeof value1 === 'string') {\n        result = this.toIndexes(value1.split('').concat(['stop-input', 'start-output']), maxThreshold);\n      } else {\n        result = this.toIndexes(value1.concat(['stop-input', 'start-output']), maxThreshold);\n      }\n\n      if (value2 === null) return result;\n\n      if (typeof value2 === 'string') {\n        return result.concat(this.toIndexes(value2.split(''), maxThreshold));\n      } else {\n        return result.concat(this.toIndexes(value2, maxThreshold));\n      }\n    }\n  }, {\n    key: 'toCharacters',\n    value: function toCharacters(indices) {\n      var maxThreshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      var result = [];\n      var characterTable = this.characterTable;\n\n      for (var i = 0, max = indices.length; i < max; i++) {\n        var index = indices[i];\n        if (index < maxThreshold) continue;\n        var character = characterTable[index];\n        if (character === undefined) {\n          throw new Error('unrecognized index \"' + index + '\"');\n        }\n        result.push(character);\n      }\n\n      return result;\n    }\n  }, {\n    key: 'toString',\n    value: function toString(indices, maxThreshold) {\n      return this.toCharacters(indices, maxThreshold).join('');\n    }\n  }, {\n    key: 'addInputOutput',\n    value: function addInputOutput() {\n      this.addSpecial('stop-input');\n      this.addSpecial('start-output');\n    }\n  }, {\n    key: 'addSpecial',\n    value: function addSpecial() {\n      for (var i = 0; i < arguments.length; i++) {\n        var special = arguments[i];\n        var specialIndex = this.indexTable[special] = this.characters.length;\n        this.characterTable[specialIndex] = special;\n        this.characters.push(special);\n      }\n    }\n  }, {\n    key: 'toFunctionString',\n    value: function toFunctionString() {\n      return '\\nvar characterTable = ' + JSON.stringify(this.characterTable) + ';\\nvar indexTable = ' + JSON.stringify(this.indexTable) + ';\\nvar characters = ' + JSON.stringify(this.characters) + ';\\n' + this.toIndexes.toString().replace(/(let|var) indexTable = this[.]indexTable;\\n/, '').replace(/this[.]/g, '') + '\\n' + this.toIndexesInputOutput.toString().replace(/this[.]/g, '') + '\\n' + this.toCharacters.toString().replace(/(let|var) characterTable = this[.]characterTable;\\n/g, '').replace(/this[.]/, '') + '\\n';\n    }\n  }], [{\n    key: 'fromAllPrintable',\n    value: function fromAllPrintable(maxThreshold) {\n      var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ['\\n'];\n\n      for (var i = 32; i <= 126; i++) {\n        values.push(String.fromCharCode(i));\n      }\n      return new DataFormatter(values, maxThreshold);\n    }\n  }, {\n    key: 'fromAllPrintableInputOutput',\n    value: function fromAllPrintableInputOutput(maxThreshold) {\n      var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ['\\n'];\n\n      var dataFormatter = DataFormatter.fromAllPrintable(maxThreshold, values);\n      dataFormatter.addInputOutput();\n      return dataFormatter;\n    }\n  }, {\n    key: 'fromStringInputOutput',\n    value: function fromStringInputOutput(string, maxThreshold) {\n      var _String$prototype;\n\n      var values = (_String$prototype = String.prototype).concat.apply(_String$prototype, _toConsumableArray(new Set(string)));\n      var dataFormatter = new DataFormatter(values, maxThreshold);\n      dataFormatter.addInputOutput();\n      return dataFormatter;\n    }\n  }, {\n    key: 'fromArrayInputOutput',\n    value: function fromArrayInputOutput(array, maxThreshold) {\n      var dataFormatter = new DataFormatter(array.filter(function (v, i, a) {\n        return a.indexOf(v) === i;\n      }).sort(), maxThreshold);\n      dataFormatter.addInputOutput();\n      return dataFormatter;\n    }\n  }, {\n    key: 'fromString',\n    value: function fromString(string, maxThreshold) {\n      var _String$prototype2;\n\n      var values = (_String$prototype2 = String.prototype).concat.apply(_String$prototype2, _toConsumableArray(new Set(string)));\n      return new DataFormatter(values, maxThreshold);\n    }\n  }, {\n    key: 'fromJSON',\n    value: function fromJSON(json) {\n      var dataFormatter = new DataFormatter();\n      dataFormatter.indexTable = json.indexTable;\n      dataFormatter.characterTable = json.characterTable;\n      dataFormatter.values = json.values;\n      dataFormatter.characters = json.characters;\n      return dataFormatter;\n    }\n  }]);\n\n  return DataFormatter;\n}();\n\nexports.default = DataFormatter;\n//# sourceMappingURL=data-formatter.js.map"},"lineCount":222}},"hash":"c7032b7abc8b95f3744c175c2ec498ae","cacheData":{"env":{}},"id":95}